
Websites 
----- 
  1. static websites 
      v1
  2. dynamic websites 
      v2 

Webapps 
----
  * deals with huge chunk of data 
  examples: 
    gmail.com 
    cricinfo.com 
    instagram.com 
    facebook.com
    twitter.com
    linkedin.com 
    youtube.com 
    netflix.com 
    hotstar.com 
  
  1. Server Side Rendering Apps (SSR Apps)
  2. Client Side Rendering Apps (CSR Apps)
      3 projects 

Browser 
----
  HTML Renderer + CSS Parser + JS Engine = Browser Core 

  Types 
  ----- 
    1. Ever-green Browser 
        * the browser that updates itself automatically 
        * all modern browsers 

    2. Non-ever-green browser 
        * will not update themeselves 
        * IE 10, IE 11

Browser History 
---------------
  Netscape Navigator
  Microsoft IE

  1994-2008: NN 
  1995-2015: MS-IE
  1995: Opera 

  2003: Apple Safari 
        on Webkit Browser Core [open sourced]

  2004: Mozilla Firefox
        on Mozilla Browser Core [open sourced]

  2008: Google Chrome 
        on Chromium Browser Core [open sourced] = Webkit + Mozilla + JS Engine 

  2013: Opera 
        on Chromium Browser Core 

  2015: MS-Edge
        on Chromium Browser Core 

  2019: Brave 
        on Chromium Browser Core 


Popular Browser Families 
---
  1. Chromium Core 
      ( -webkit )
  2. Webkit Core
      ( -webkit ) 
  3. Mozilla Core
      ( -moz ) 

Types of Layout
--------
  1. Fixed Layout 
  2. Fluid Layout 


HTML 
--
  * Standard
  * Structural Layer

  Types of Elements 
  --
    1. Block Level Elements 
        h1 to h6, div, p

    2. Inline Elements 
        button, span, a

1. Semantic elements 
    header, footer, main, nav, article, section, aside, a, button, img, p, 

2. Non-semantic elements 
    div, span 


CSS 
---
  * Standard 
  * Presentation Layer

JS 
--- 
  * Interation Layer 


===
Standard Recommended Coding Practices (100 marks)
---
  1. properly formatted code (indentation of 2 spaces and line breaks)
  2. code comments (20%)
  3. proper naming conventions 
  4. 100% valid code

----

Validating HTML using w3c validator 
--

Naming Conventions & Casing 
----
  Casing Types 
  --------
    1. PascalCase 
        * Recommended for Object Oriented Program's classes 
        * also Recommended for Interface in Java & TypeScript 

        examples 
        ---
          class CarDetails {

          }

          interface Employee {

          }

    2. camelCase 
        * Recommended for variables, const, functions, methods in JS & TS 
        * Recommended for id's of html elements 

        examples 
        -----
          var myCar = 'BMW';

          function getCarInfo() {
            //....
          }
    
    3. kebab-case
        * Recommended for URLs 
        * Recommended for file names, folder names, assets in front end projects  
        * Recommended for css classes 
        * okay for id's of html elements if your architect says accepts

        examples 
        -----
          btn-primary
          slideshow-container 
          youtube-logo.png 

    4. snake_case 
        * never ever use this. 
        * okay for const in JS & TS if architect accepts

        examples
        ---
          const MAX_STUDENTS_PER_CLASS = 30;


----
CSS 
---
  Cascading Style Sheets 
  -----------
  Syntax 
  ---
    <selector> {
      /* style defn */ 
      property: property-value;
    }

  Types of Styles 
  ----  
    1. Inline Styles 
        * written on the elements directly 

        disadv 
        --- 
          1. styles are not re-usable in other elements 
          2. styles are not re-usable in other pages 
          3. Bloating HTML files with css styles (mixing Structural + presentation layer)

    2. Internal Styles 
        * written inside html file within <style></style>
        * styles are page-wide 
        
        Disadv 
        ---
          1. styles are not re-usable in other pages
          2. Bloating HTML files with css styles (mixing Structural + presentation layer)

    3. External Styles 
        * coded in separate css file (i.e called as stylesheet with extn .css)
        * then, we have to link the css file wtih the html using <link> tag 



  CSS Selectors 
  ----
    1. Element Selector / Type Selector 
    2. Id Selector 
    3. Class Selector [Recommended]
    4. Attribute Selector (TODO)
    5. Universal Selector 
    6. Pseudo Selector (TODO)
    For more Ref: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors

----

ECMAScript 
--
  * Standard 
  * ECMAScript is a JavaScript standard intended to ensure the interoperability of web pages across different browsers.
  * Grammar 
  * Implementations: JS
  * till June 2015 
  -----
    ECMAScript / JS were NOT Object Oriented 
    * no class, no extends 
    * no import, no export 

  * from June 2015 
  -----
    ECMAScript / JS have become Object Oriented 
    * class, extends 
    * import, export 


To become React JS Dev 
--
  Prereq: 
  --


Fetch API (in React JS)
Import and Export (in ReactJS)


Storing Data in Browser 
--
  1. using cookies 
  2. using Local Storage 
  3. using Session Storage 


----
ECMAScript 
  * Standard
JavaScript 
  * Implementation of ES

TypeScript (TS)
---
  TS = JS + DataTyping 

  * Superset of JavaScript
  * 

  DataTyping 
  ---
    Primitive Datatypes:
    ---------
      string, number, boolean, null, undefined, symbol (ES2015), bigint (ES2017)

    Non-Primitive Datatypes / Reference Types 
    ---
      Object, Array, RegExp 

  1. Strictly-Typed Languages / Strongly-Typed Languages 
      Examples: Java, C#, TS 
      Syntax:
      --
        int x = 10; // valid 
        x = 100; // valid 
        x = true; // compilation error 

        String myName = "Arun"; 
        myName = "John"; // valid
        myName = 1200; // compilation error 

  2. Loosely-Typed Languages / Dynamically-Typed Languages 
      Examples: JS, PHP, Python
      Syntax in JS 
      ----
        var x = 10; // number 
        x = true; // valid 
        x = 'John'; // valid 
        x = undefined; //valid
        x = null;  //valid
        x = []; //valid
        x = {}; //valid
        x = function(){  //valid

        }
      

  TypeScript Syntax 
  ---
    1. Explicitly-Typed 
        var x: number = 10; // valid 
        x = 100; // valid
        x = true; // error 

    2. Implicitly-Typed / Type Inference 
        var y = 20; // valid 
        y = true; // error 
    
    3. Without Assignment
        var z; // has an implicit type - any 
        z = 10;  // valid 
        z = true; // valid 
        z = "Arun"; // valid 
        z = 100; // valid 

  ------------
  Many more examples in TS 
  --
   
    Toolset
    --
      TypeScript => ( TSC ) => JavaScript
      






  







