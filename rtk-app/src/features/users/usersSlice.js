// slice = reducer + redux thunk middleware integration
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";

// having initial state 
const initialState = {
  isLoading: false,
  isError: false,
  userList: [],
  status: 'idle'
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(addUserAsync())`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const addUserAsync = createAsyncThunk(
  'users/addUser',
  async(formData) => {
    const response = await axios.post('https://jsonplaceholder.typicode.com/users', formData)
    return response.data;
  }
)

export const fetchUsersAsync = createAsyncThunk(
  'users/fetchUsers',
  async() => {
    const response = await axios.get('https://jsonplaceholder.typicode.com/users')
    return response.data;
  }
)

/* createSlice is a function that accepts an initial state,
  an object full of reducer functions, and a "slice name", 
  and automatically generates action creators 
  and action types that correspond to the reducers and state.
*/
export const usersSlice = createSlice({
  name: "users", // slice name
  initialState, // initial state
  reducers: {
    addUser: (state) => {
      // debugger;
      // state.userList = [...state.userList, state.payload]
    },
    fetchUsers: (state) => {
      // state.userList = state.payload
    },
  },
  // The 'extraReducers' field let the slice handle actions defined elsewhere
  // including actions generated by Redux thunk or in other slices
  extraReducers: (builder) => {
    // many cases should be handled here
    builder
      .addCase(addUserAsync.pending, (state) => {
        state.status = "loading";
        state.isLoading = true;
        state.isError = false;
      })
      .addCase(addUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.isLoading = false;
        state.isError = false;
        state.userList = [ ...state.userList, action.payload];
      })
      .addCase(addUserAsync.rejected, (state) => {
        state.status = "idle";
        state.isLoading = false;
        state.isError = true;
      })
      .addCase(fetchUsersAsync.pending, (state) => {
        state.status = "loading";
        state.isLoading = true;
        state.isError = false;
      })
      .addCase(fetchUsersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.isLoading = false;
        state.isError = false;
        state.userList = action.payload;
      })
      .addCase(fetchUsersAsync.rejected, (state) => {
        state.status = "idle";
        state.isLoading = false;
        state.isError = true;
      });
  },
});

export const { addUser, fetchUsers } = usersSlice.actions;
export default usersSlice.reducer;