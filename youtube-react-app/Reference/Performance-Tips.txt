ReactJS - Performace Tips
--
1. Use NPM package or any third party libraries only if absolutely needed.
2. Most performance issues come in lists. So, think about having pagination.
  Try this awesome package
  https://bvaughn.github.io/react-virtualized/
3. Make use of props wisely. Don't leave out unused props. 
  (show our redux app example, 
  in which if our app doesn't display the userId anywhere.. dont receive such a prop data)
  So, a bad way could be...
  const MyComp = (props) => { //bad way if all props are not used

  }

  but a better way to have props is here.. using object destructuring.
  cont MyComp = ({ title, body, postId}){ // ignoring userId, if I don't display it anywhere

  }
  Also,don't pass unneccessary props. 
  And wise idea is not to store userId in the redux store.

4. Lazy Load Images 
  https://www.npmjs.com/package/react-lazy-load-image-component
5. Use profiler to record the app pages. And then check and fix the app. 
6. Use Redux Dev Tools to check how long it take for the actions.
7. Think about optimizing back end also. 
8. Avoid having unnecessary tags, css. go with Fragment, <></>, 
9. Don't bloat the page with too many components, 
  because will have lifecycle hooks and will have re-rendering cycles.
  If one parent comp updates, that will update child comp's till the last level.
  Solution could be to use Pure Components 
10. Don't have more class components. Use functional components. 
  Use hooks to stop child comp re-rendering. Remember useEffect, useCallback!
11. Don't write too many inline styles. You should definitely avoid it inside loops.
12. Don't write inline callbacks in loops. 
    // bad 
    <button onClick={() => deleteRecord()} >Delete</button> 
    // good 
    const deleteRecord = () =>{

    }
    <button onClick={deleteRecord} >Delete</button> 

13. Use Why did you update tool
    https://www.npmjs.com/package/@welldone-software/why-did-you-render
14. shouldComponentUpdate lifecycle hook
15. Learn more performance tips.. There are aplenty.

===
Debugging in Production
---
https://medium.com/@baphemot/intro-to-debugging-reactjs-applications-67cf7a50b3dd