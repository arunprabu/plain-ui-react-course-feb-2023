

Capstone - 1
--
  submission checklist
  ---
    1. follow naming conventions 
    2. follow better coding practices
        * validate html
        * validate css 
        * accessibility guidelines 
        * valid javascript 
    3. formatted code 
    4. code comments (20%)
    5. have 0 console errors
  ---

--------




Project Structure
--
  src/
    components/
      Header/
      Footer/
      MenuList/
    pages/
      HomePage/
        LatestVideo/
        TrendingVideoList/

        


    

---
Components 
---
  * reusable block of code 


  1. Functional Components 
      * coded as functions 
      * were called as presentational components (before react v16.8)
      * were called as stateless components  (before react v16.8)
      * were called as dumb components  (before react v16.8)
      * they are not called as dumb, stateless, presentational anymore 
      * fn components can also have state 

      1.1 Fn Components with Named Function [DONE]
      1.2 Fn Components with Anonymous Function [DONE]
      1.3 Fn Components with Arrow Function [DONE | RECOMMENDED]
    
  2. Class Components 
      * coded as class in js 
      * were/are called as containers 
      * were called as stateful components 
      * were called as smart components 


Data Binding
--
  1. One Way Binding 
      * have data in variable and display in JSX 
  
  2. Two-Way Binding
      * have data in variable, display in JSX and update the data in variable

-------------
Sharing Data between components
---
  1. Parent to Child Component Communication [DONE]
      using Props

  2. Child to Parent Component Communication [TODO]
      Using Props and Event Handler from Parent Comp

  3. Any to Any Component Communication 
      Using Context API 
      Using Redux / Flux / MobX 

====
States [DONE]
Events [DONE]
Conditional Rendering [DONE]
Lists & Keys [DONE]

Styles [DONE]
Two Way Binding [DONE]

Class Comp [DONE]
  Lifecycle [DONE]
React Without ES6 [DONE]
React Component Without JSX [DONE]

Fragments [DONE]
Strict Mode [DONE]
Error Boundary [DONE]

Higher Order Components 
  * a fn or a class component 
  

Setup Linting [DONE]

Routing [DONE]
  1. Basic Routing [DONE]
  2. Nested Routing / Child Routing [TODO]

Forms 
  Controlled Components 
  Uncontrolled Components

REST API Calls  
  Submitting the form data to backend 

PropTypes [DONE]

Hooks (8-12 hours)

REST API Calls  
  * from functional components 
  * from class components

Lazy Loading 
Performance 

Unit Testing (25-30 hours)
Redux (10-12 hours)

       
Single Page App (SPA)
---
  7 Characteristics 
  ---
    1. Pages should not reload/refresh [DONE]
    2. URL should be changed [DONE]
    3. Browser History should be maintained without Page Refresh [DONE]
    4. Retain Header and Footer [DONE]
    5. The content in b/w header and footer should be updated [DONE]
    6. Active menu should be set [DONE]
    7. Page Title should be changed [TODO]
        Refer: helmet package -- get it from npmjs.com 


Routing 
---
  npm i react-router-dom

  Step 0: 
  ----
    Identify the Menus and the URLs 

    Home  
      Url: /

    Video
      Url: /video 

    About Us
      Url: /about-us 

    Contact Us 
      Url: /contact-us 

  Step 1: 
  ------
    Let's create the necessary components for the URLs 

    HomePage 
    VideoPage
    AboutUsPage 
    ContactUsPage 

  Step 2: 
  ------
    Configuring the Routes in App.js 

    * associating the path with the comp 


  Step 3: 
  ------
    Let's check the app. Pages will still refresh. 

    It's time to fix. 

    in MenuItem.js / MenuList.js 
      replace <a href=''> with <NavLink to=''/>


  Check the app. We have SPA.
===========


React Virtual DOM 
====
  A virtual DOM is a lightweight JavaScript object which is the copy of the real DOM.

  This Virtual DOM works in three simple steps-
  i. Whenever any underlying data changes, the entire Ul is
  re-rendered in Virtual DOM representation
  ii. Then the difference between the previous DOM representation
  and the new one is calculated
  iii. Once the calculations are done, the real DOM will be updated with only
  the things that have actually changed
  
----



How to Setup ESLint and also prettier?
=========
  Step 1: 
    npm i eslint -D 
  
  Step 2: 
    try the following command 
      npx eslint --init 
      or 
      You can also run this command directly using 'npm init @eslint/config'.

    to create .eslintrc.json 
  
  Step 3:
  --
    we can setup the rules or inherit from standard rules

  Step 4: 
  --
    we can setup prettier 


----
