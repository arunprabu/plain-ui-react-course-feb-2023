

Capstone - 1
--
  submission checklist
  ---
    1. follow naming conventions 
    2. follow better coding practices
        * validate html
        * validate css 
        * accessibility guidelines 
        * valid javascript 
    3. formatted code 
    4. code comments (20%)
    5. have 0 console errors
  ---

--------




Project Structure
--
  src/
    components/
      Header/
      Footer/
      MenuList/
    pages/
      HomePage/
        LatestVideo/
        TrendingVideoList/
      VideoPage/
        VideoPlayer/
        SuggestedVideoList/
          ...
          SuggestedVideo/
        CommentList/
          Comment/
      AboutUsPage/
      ContactUsPage/
      HocDemoPage/
      


---
Components 
---
  * reusable block of code 


  1. Functional Components 
      * coded as functions 
      * were called as presentational components (before react v16.8)
      * were called as stateless components  (before react v16.8)
      * were called as dumb components  (before react v16.8)
      * they are not called as dumb, stateless, presentational anymore 
      * fn components can also have state since react v 16.8 

      1.1 Fn Components with Named Function [DONE]
      1.2 Fn Components with Anonymous Function [DONE]
      1.3 Fn Components with Arrow Function [DONE | RECOMMENDED]
    
  2. Class Components 
      * coded as class in js 
      * were/are called as containers 
      * were called as stateful components 
      * were called as smart components 


Data Binding
--
  1. One Way Binding 
      * have data in variable and display in JSX 
  
  2. Two-Way Binding
      * have data in variable, display in JSX and update the data in variable

-------------
Sharing Data between components a.k.a Cross Component Communication 
---
  1. Parent to Child Component Communication [DONE]
      using Props

  2. Child to Parent Component Communication [TODO]
      Using Props and Event Handler from Parent Comp

  3. Any to Any Component Communication 
      => Using Context API 
      => Using Redux / Flux / MobX 

====
States [DONE]
Events [DONE]
Conditional Rendering [DONE]
Lists & Keys [DONE]
Styles [DONE]
Two Way Binding [DONE]
Class Comp [DONE]
  Lifecycle [DONE]
React Without ES6 [DONE]
React Component Without JSX [DONE]
Fragments [DONE]
Strict Mode [DONE]
Error Boundary [DONE]
Higher Order Components [DONE]
  * a fn or a class component 
Setup Linting [DONE]
Routing [DONE]
  1. Basic Routing [DONE]
  2. Nested Routing / Child Routing [TODO]
PropTypes [DONE]

Forms (1.5 hours) [DONE]
  Controlled Components 
  Uncontrolled Components

REST API Calls  [DONE]
  Submitting the form data to backend 

Serving assets from local project folder [DONE]

Hooks (8-12 hours) [DONE]
Context API [DONE]
REST API Calls  [DONE]
  * from functional components  [DONE]
  * from class components [DONE]

Unit Testing (25-30 hours)

Build and Deployment (1 hour)
--
  Lazy Loading 
  Performance 

Redux (10-12 hours)

       
Single Page App (SPA)
---
  7 Characteristics 
  ---
    1. Pages should not reload/refresh [DONE]
    2. URL should be changed [DONE]
    3. Browser History should be maintained without Page Refresh [DONE]
    4. Retain Header and Footer [DONE]
    5. The content in b/w header and footer should be updated [DONE]
    6. Active menu should be set [DONE]
    7. Page Title should be changed [TODO]
        Refer: helmet package -- get it from npmjs.com 


Routing 
---
  npm i react-router-dom

  Step 0: 
  ----
    Identify the Menus and the URLs 

    Home  
      Url: /

    Video
      Url: /video 

    About Us
      Url: /about-us 

    Contact Us 
      Url: /contact-us 

  Step 1: 
  ------
    Let's create the necessary components for the URLs 

    HomePage 
    VideoPage
    AboutUsPage 
    ContactUsPage 

  Step 2: 
  ------
    Configuring the Routes in App.js 

    * associating the path with the comp 


  Step 3: 
  ------
    Let's check the app. Pages will still refresh. 

    It's time to fix. 

    in MenuItem.js / MenuList.js 
      replace <a href=''> with <NavLink to=''/>


  Check the app. We have SPA.
===========


React Virtual DOM 
====
  A virtual DOM is a lightweight JavaScript object which is the copy of the real DOM.

  This Virtual DOM works in three simple steps-
  i. Whenever any underlying data changes, the entire Ul is
  re-rendered in Virtual DOM representation
  ii. Then the difference between the previous DOM representation
  and the new one is calculated
  iii. Once the calculations are done, the real DOM will be updated with only
  the things that have actually changed
  
----



How to Setup ESLint and also prettier?
=========
  Step 1: 
    npm i eslint -D 
  
  Step 2: 
    try the following command 
      npx eslint --init 
      or 
      You can also run this command directly using 'npm init @eslint/config'.

    to create .eslintrc.json 
  
  Step 3:
  --
    we can setup the rules or inherit from standard rules

  Step 4: 
  --
    we can setup prettier 


----


Rest API 
---
  Rest API URL: 
    https://jsonplaceholder.typicode.com/users

  Http Methods:
    GET, POST, PUT, PATCH, DELETE

    Create a New User  (CREATE)
      POST

    List Users / Fetch Users  (READ) 
      GET 

    Update User   (UPDATE)
      PUT or PATCH 

    Delete User   (DELETE)
      DELETE

    
    


    


  

    

=======
A new concept was introduced in React 16.8 - Hooks. 
They let you use state and other React features without writing a class.
Many of the features available to classes - such as lifecycle methods and states - 
are not available to functional components. 
The hooks introduced in react adds all that functionality and more.

Life Cycle Hooks and React Hooks are not same. 

This feature has loads of cool things to even replace redux .
In this example, let's build a few things just by using hooks, 
a potential alternative to redux.

Hooks enable a functional component to have state in it.
This is also called as Hook state. 

Example: 
  within a fn comp, 

  import {useState } from 'react';

  //this is a data in a variable.. not a state.
  const myProfile = {
    name: 'Arun',
    city: 'Chennai'
  }

  // to have state inside fn comp, we can use useState() . 
  // this will take in data and return getter and setter in an array. 
  // We can do array destructuring to capture both.
  const [profile, setProfile] = useState(myProfile);

  const [age, setAge] = useState(20); // valid -- can create multiple

  // then, we can log 
  console.log(profile);

  const updateProfile = () => {
    setProfile({
      name: 'VJ',
      city: 'Chennai'
    });
    console.log(profile);
  }

  And have a button in JSX to call updateProfile method.
    <button type='button' onClick={updateProfile}>Update Profile</button>

  
===

Rules of Hooks
---------------
Hooks are JavaScript functions, but they impose two additional rules:

Only call Hooks at the top level. 
  Don’t call Hooks inside loops, conditions, or nested functions.
Only call Hooks from React functional components. 
  Don’t call Hooks from regular JavaScript functions. 

(There is just one other valid place to call Hooks — your own custom Hooks.)

=======================

useState() Hook 
---

useEffect() - Hook 
  is what componentDidMount and componentDidUpdate to class comp 
  will get executed after render cycle 
  useEffect( () => {
    console.log('test');
  })


useCallback()
Hook prevents the child component rendering if the dependency is not changed at all 
For more refer: https://kentcdodds.com/blog/usememo-and-usecallback
Important one for performance optimization

---
useContext()
Let's us share data across components 

Step 1: create context with any data or even null inside 
Refer: PageContext.js 

Step 2: Provide the data to the list of components you want to share 
Check App.js 

Step 3: Using <PageContext.Provider> to share the data across the few components 

Step 4: Consume it in both Home.js and About.js 
  ----



Rules of Hooks 
  Refer: 
  https://reactjs.org/docs/hooks-rules.html

Software Development LifyCycle 
------------------------------
  Calculator App
  --------------
    Analysing Requirements (1m)
      Design (.5m)
        Development (6m)
          Testing (1.5m) 
            Deployment (.25m)
              Maintenance (for years)

-------------
Dev => QA => (bugs) => Dev => QA => (bugs) => Dev => QA => (bugs) => Dev => QA => (QA CERTIFY) => Deployment

===========

Requirements for calc app 
---
  Sources:
  ----
    FRD
    HLD
    LLD
    Designs 
    Style Guides

  ----
  Development -- Sources: FRD, Designs
  ----
    Test Cases
    ------------
      1. inputs should be of number [PASSED]
      2. o/p should always be a number [PASSED]
      3. if invalid inputs entered add btn should be disabled [PASSED]
      4. add button should have + icon [PASSED]
      5. add button should have the lable 'ADD' in all caps. [PASSED]

    function add(a, b) {
      if(typeof a === 'number' && typeof b === 'number' ){
        return a + b;
      }
    }

    add(10, 20); // 30 
    add("10", "20"); 
    add(true, 20);
    add("$$$$", "%%%%");  

   [ Tools to Compare the test cases and app's functionality code ]

-----
  
Modern Software Development Approaches 
----
  1. Test-Driven Development (TDD) [TO LEARN]
      * Write NEW CODE only if automated test fails 

      Dev writes Test Cases => (FAILURE) => Dev writes Functionality => (SUCCESS) => [CODE COMPLETE]

      Test Patten: AAA (Arrange, Act, Assert)
      Tools: JEST JS

  2. Behavior-Driven Development (BDD) 
      * an agile s/w methodology
      * app is documented, designed around the behaviour the end user wants to experience 
        when interacting with the app. 
      
      Dev writes Test Cases around the behaviour of the app => (FAILURE) => Dev writes Functionality => (SUCCESS) => [CODE COMPLETE]

      Test Pattern: Given/When/Then
      Tools: Jasmine JS


Automated Testing
---
  Levels
    0. Static Type Checking [DONE]
        Examples: TypeScript or FlowJS or PropTypes

    1. Unit Testing [TO LEARN]
        * Testing tiny, independent unit of our code.
        * Testing the component in isolation (without connecting with REST API)
        * Bug Reduction Density: 40-80% 

        Tools: 
        ------
          JEST JS (Unit Testing Framework + Test Runner)
          React Testing Library (RTL)

    2. Integration Testing 
        * Testing the component by integrating multiple components together 
        * Testing the component with Service Calls (REST API Calls)

        Tools:
        ------
          JEST JS (Unit Testing Framework + Test Runner)
          React Testing Library (RTL)


    3. End To End Testing 
        * Testing the whole app as one entity
        * will be done by QA team members.

        Tools: 
        -----
          * Selenium 
          * CypressJS 
          * Protractor 

Tools for Unit Testing a React App
------------
  1. JEST JS (Unit Testing Framework + Test Runner)
  2. React Testing Library (RTL) - Testing utility for DOM Querying 

==========
  1. How to write test cases?
  2. Where to write the test cases?
  3. How to test the app by tools? 
----------

Unit Testing Topics 
==================
  0. File walkthru 
  1. Testing JSX Elements 
      * getByText [DONE]
      * getByTestId [DONE]
      * ..
  2. Testing Props [DONE]
  3. Testing inline CSS [DONE]
  4. Testing External CSS (CSS class) [DONE]
  5. Testing Events & States [DONE]
  6. Testing Events with Buttons [DONE]
  7. Snapshot Testing [DONE]
  8. Testing Forms [DONE]
      Ref: ContactUsPage.js and ContactUsPage.test.js 
      Validate the form 

  9. Testing REST API Calls 
      * with mocks [DONE]
      * with spies 
      * negative test 
  10. Testing Routing [TODO]
  11. Setup and Tear Down 
  12. Code Coverage 

---------------
